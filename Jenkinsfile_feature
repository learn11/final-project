pipeline {
    agent {
        kubernetes {
            yaml '''
            apiVersion: v1
            kind: Pod
            spec:
                containers:
                  - name: slave
                    image: docker:latest
                    tty: true
                    securityContext:
                        privileged: true
                  - name: pytest
                    image: mikey8520/tests
                    tty: true
                    securityContext:
                        privileged: true
                  - name: maven
                    image: maven:alpine
                    command:
                    - cat
                    tty: true
                  - name: busybox
                    image: busybox
                    command:
                    - sleep
                    - "3600"
                    tty: true
            '''
        }
    }

    environment {
        GIT_BRANCH = 'main'  // Target branch to merge into
        GIT_FEATURE_BRANCH = 'origin/feature'  // Branch to merge from
    }

    stages {
        stage('Checkout Git') {
            steps {
                script {
                    // Checkout code from the Git repository
                    checkout scm
                }
            }
        }

        stage('Run Tests with pytest') {
            steps {
                container('pytest') {
                    // Run pytest inside the pytest container
                    script {
                        sh 'cd ./fast_api && python -m pytest'
                    }
                }
            }
        }

        stage('Merge feature branch to main') {
            steps {
                script {
                    // Configure Git user for the merge
                    withCredentials([usernamePassword(credentialsId: 'git')]) {
                        sh '''
                        git config --global user.email "jenkins@example.com"
                        git config --global user.name "Jenkins"
                        git checkout ${GIT_BRANCH}
                        git pull origin ${GIT_BRANCH}  // Ensure local branch is up-to-date
                        git merge ${GIT_FEATURE_BRANCH} --no-ff -m "Merge branch 'feature'"
                        git push origin ${GIT_BRANCH}
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline POST:'
        }
        success {
            echo 'Pipeline SUCCESS!'
        }
        failure {
            echo 'Pipeline FAILED, check the logs for more information!'
        }
    }
}
